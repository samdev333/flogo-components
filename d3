Step 1: Structuring Confluence Pages for LOBs
Each LOB will have its own Confluence page storing structured capability data in a table.


ðŸ“Œ Table Structure for Each LOB Page
Each page will contain a Page Properties Macro to store structured business capability data.

Example: Retail Payments Solutions Page
markdown
Copy
Edit
## Business Capabilities for sample solutions
{page-properties}
|| Capability ID || Capability Name || Category || Owner || Status || Dependencies || Maturity Level || Systems Impacted || Description ||
| 101 | Real-Time Payments API | API | John Doe | Active | Fraud Detection API | Mature | Core Banking System | Processes real-time transactions |
| 102 | Digital Wallet API | API | Jane Doe | In Progress | Compliance Engine | Growing | Payment Gateway | Manages consumer digital wallets |
{page-properties}
Repeat for Each LOB
Create separate pages for each LOB.
Copy the same table format and modify the data accordingly.
ðŸ“Œ Step 2: Fetch Confluence Data via API
Use Confluence REST API to Read Capability Data
We will fetch data dynamically from Confluence and consolidate it in the React UI.

Confluence API Endpoints
List All LOB Pages Under "Payments Services"
http
Copy
Edit
GET https://yourcompany.atlassian.net/wiki/rest/api/content?title=PS â€“ Business Capabilities&expand=children.page
Fetch Capability Table from Each LOB Page
http
Copy
Edit
GET https://yourcompany.atlassian.net/wiki/rest/api/content/{pageId}?expand=body.storage
Extract Table Data
The response contains HTML content. We will parse HTML tables into JSON.
ðŸ“Œ Step 3: Build React + D3.js UI
The React UI will:

Fetch all LOB pages from Confluence
Extract table data
Render a D3.js hierarchy tree
ðŸ“Œ React Code to Fetch Data from Confluence and Render a Hierarchical Tree
jsx
Copy
Edit
import React, { useEffect, useRef, useState } from "react";
import * as d3 from "d3";
import axios from "axios";
import DOMParser from "dom-parser";

const ConfluenceD3Tree = () => {
  const svgRef = useRef();
  const [data, setData] = useState(null);

  useEffect(() => {
    fetchConfluenceData();
  }, []);

  const fetchConfluenceData = async () => {
    try {
      // Fetch parent "PS" page to get all LOB child pages
      const parentPageId = "123456"; // Replace with actual page ID
      const response = await axios.get(
        `https://yourcompany.atlassian.net/wiki/rest/api/content/${parentPageId}?expand=children.page`,
        {
          headers: { Authorization: `Bearer YOUR_CONFLUENCE_API_TOKEN` },
        }
      );

      const lobPages = response.data.children.page;
      let consolidatedData = { name: "Payments Services", children: [] };

      // Loop through each LOB page and fetch capability tables
      for (let lob of lobPages) {
        let pageId = lob.id;
        let lobResponse = await axios.get(
          `https://yourcompany.atlassian.net/wiki/rest/api/content/${pageId}?expand=body.storage`,
          { headers: { Authorization: `Bearer YOUR_CONFLUENCE_API_TOKEN` } }
        );

        let htmlContent = lobResponse.data.body.storage.value;
        let parser = new DOMParser();
        let doc = parser.parseFromString(htmlContent, "text/html");
        let tableRows = doc.getElementsByTagName("tr");

        let lobData = { name: lob.title, children: [] };

        for (let i = 1; i < tableRows.length; i++) {
          let cells = tableRows[i].getElementsByTagName("td");
          lobData.children.push({
            name: cells[1].textContent, // Capability Name
            status: cells[4].textContent, // Status
          });
        }

        consolidatedData.children.push(lobData);
      }

      setData(consolidatedData);
      drawTree(consolidatedData);
    } catch (error) {
      console.error("Error fetching Confluence data", error);
    }
  };

  const drawTree = (treeData) => {
    const width = 800, height = 500;
    d3.select(svgRef.current).selectAll("*").remove();
    const svg = d3.select(svgRef.current).attr("width", width).attr("height", height).append("g").attr("transform", "translate(50,50)");
    const root = d3.hierarchy(treeData);
    const treeLayout = d3.tree().size([width - 100, height - 150]);
    treeLayout(root);
    const linkGen = d3.linkHorizontal().x(d => d.y).y(d => d.x);
    svg.selectAll(".link").data(root.links()).enter().append("path").attr("class", "link").attr("d", linkGen).attr("stroke", "#999").attr("fill", "none");
    const node = svg.selectAll(".node").data(root.descendants()).enter().append("g").attr("class", "node").attr("transform", d => `translate(${d.y},${d.x})`);
    node.append("circle").attr("r", 8).attr("fill", d => (d.children ? "blue" : "green"));
    node.append("text").attr("dx", 12).attr("dy", 4).text(d => d.data.name);
  };

  return <svg ref={svgRef}></svg>;
};

export default ConfluenceD3Tree;
ðŸ“Œ Step 4: Embed React UI in Confluence
Host React UI on Vercel / AWS / Azure
Embed in Confluence Page
html
Copy
Edit
<iframe src="https://yourapp.com" width="100%" height="600px"></iframe>
ðŸ“Œ Final Outcome
ðŸš€ For Executives & Leadership:

Visual Business Capability Map
Click to drill down into each LOB and capability
Status-based color coding
ðŸ’¡ For Engineers & Architects:

Update capabilities directly in Confluence
No separate database or backend maintenance
Data automatically syncs to the UI
ðŸ“Œ Next Steps
âœ… Enhance with Search & Filtering
âœ… Embed links to capability details
âœ… Make UI mobile-friendly

Would you like user-based permissions (e.g., restrict who can edit capabilities)? ðŸš€







